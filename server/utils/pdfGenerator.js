import PDFDocument from 'pdfkit';
import { fromCents } from './money.js';
import fs from 'fs';
import path from 'path';

export const generatePDFStatement = (transactions, total, startDate, endDate, pages, user) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 50 });
    const chunks = [];

    doc.on('data', chunk => chunks.push(chunk));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', err => reject(err));

    // theme
    const brandColor = '#1E90FF'; 
    const secondaryColor = '#f4f4f4';
    const textColor = '#333';
    const logoPath = path.resolve('public', 'fintech.jpg'); 

    // header
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 50, 45, { width: 60 });
    }

    // Company Name
    doc
      .fillColor(brandColor)
      .fontSize(20)
      .text('Pinnacles Financial Service', 120, 50, { align: 'left' });

    doc
      .moveDown()
      .fontSize(12)
      .fillColor(textColor)
      .text(`Account Statement`, { align: 'right' })
      .text(`Date: ${new Date().toLocaleDateString()}`, { align: 'right' });

    doc.moveDown();

    // user info
    if (user) {
      doc
        .fontSize(12)
        .fillColor(textColor)
        .text(`Name: ${user.name || 'N/A'}`)
        .text(`Email: ${user.email || 'N/A'}`)
        .moveDown();
    }

    // ==== STATEMENT RANGE & PAGE ====
    doc
      .fontSize(12)
      .fillColor(textColor)
      .text(`Statement Period: ${startDate || 'N/A'} to ${endDate || 'N/A'}`)
      .text(`Page: 1 of ${pages || 1}`)
      .moveDown(1.5);

    // ==== TABLE HEADER ====
    doc
      .fillColor(brandColor)
      .font('Helvetica-Bold')
      .text('ID', 50, doc.y, { continued: true })
      .text('Type', 150, doc.y, { continued: true })
      .text('Date', 220, doc.y, { continued: true })
      .text('Amount', 320, doc.y, { continued: true })
      .text('Status', 400, doc.y, { continued: true })
      .text('Description', 480, doc.y);

    doc.moveDown();
    doc.strokeColor(brandColor).moveTo(50, doc.y).lineTo(550, doc.y).stroke();
    doc.moveDown(0.5);

    // ==== TABLE BODY ====
    doc.font('Helvetica').fillColor(textColor);

    transactions.forEach(tx => {
      doc
        .text(tx.id.toString().slice(-6), 50, doc.y, { continued: true }) // show last 6 chars
        .text(tx.type, 150, doc.y, { continued: true })
        .text(new Date(tx.occurredAt).toLocaleDateString(), 220, doc.y, { continued: true })
        .text(fromCents(tx.amountCents), 320, doc.y, { continued: true })
        .text(tx.status || 'N/A', 400, doc.y, { continued: true })
        .text(tx.description || '-', 480, doc.y);
    });

    // ==== FOOTER ====
    doc.moveDown(2);
    doc
      .fontSize(10)
      .fillColor('#999')
      .text('Generated by Your Company Name', 50, doc.page.height - 50, { align: 'center' });

    doc.end();
  });
};
